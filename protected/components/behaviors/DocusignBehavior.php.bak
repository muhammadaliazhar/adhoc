<?php

/* * *********************************************************************************
 * X2CRM is a customer relationship management program developed by
 * X2Engine, Inc. Copyright (C) 2011-2016 X2Engine Inc.
 * 
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License version 3 as published by the
 * Free Software Foundation with the addition of the following permission added
 * to Section 15 as permitted in Section 7(a): FOR ANY PART OF THE COVERED WORK
 * IN WHICH THE COPYRIGHT IS OWNED BY X2ENGINE, X2ENGINE DISCLAIMS THE WARRANTY
 * OF NON INFRINGEMENT OF THIRD PARTY RIGHTS.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License along with
 * this program; if not, see http://www.gnu.org/licenses or write to the Free
 * Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301 USA.
 * 
 * You can contact X2Engine, Inc. P.O. Box 66752, Scotts Valley,
 * California 95067, USA. on our website at www.x2crm.com, or at our
 * email address: contact@x2engine.com.
 * 
 * The interactive user interfaces in modified source and object code versions
 * of this program must display Appropriate Legal Notices, as required under
 * Section 5 of the GNU Affero General Public License version 3.
 * 
 * In accordance with Section 7(b) of the GNU Affero General Public License version 3,
 * these Appropriate Legal Notices must retain the display of the "Powered by
 * X2Engine" logo. If the display of the logo is not reasonably feasible for
 * technical reasons, the Appropriate Legal Notices must display the words
 * "Powered by X2Engine".
 * ******************************************************************************** */

/* @edition:ent */

/**
 * A behavior for interacting with the twitter API
 * @package application.components.behaviors
 */
class DocusignBehavior extends CBehavior {

    private $accountId;

    /**
     * Creates an instance of DocusignBehavior
     * 
     * @param array params: Parameters for behavior fields
     * @return DocusignBehavior: Instance of TwitterBehavior
     */
    public static function createDocusignInstance() {
        $docusign = Yii::app()->controller->attachBehavior('DocusignBehavior', new DocusignBehavior);
        return $docusign;
    }

    public function getHeader() {
        $userId = isset(Yii::app()->user->id) ? Yii::app()->user->id : 1;
        $id = Credentials::model()->getDefaultUserAccount($userId, 'docs');
        $credentials = Credentials::model()->findByPk($id);
        $check = $id === Credentials::LEGACY_ID;

        $user = $check ? '' : $credentials->auth->username;
        $pass = $check ? '' : $credentials->auth->password;
        $integratorKey = Yii::app()->settings->docusignId;

        $header = array(
            'Accept: application/json',
            'Content-Type: application/json',
            'Media-Type: application/json',
            'X-DocuSign-Authentication: {'
            . '"Username": "' . $user . '",'
            . '"Password": "' . $pass . '",'
            . '"IntegratorKey": "' . ($integratorKey === NULL ? '' : $integratorKey) . '"',
        );

        return $header;
    }

    public function get($url) {
        $options = array(
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_URL => $url,
            CURLOPT_HTTPHEADER => $this->getHeader(),
        );

	return CJSON::decode($this->makeRequest($options));
    }

    public function post($url, $json) {
        $options = array(
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_URL => $url,
            CURLOPT_POST => true,
            CURLOPT_HTTPHEADER => $this->getHeader(),
            CURLOPT_POSTFIELDS => $json
        );

	return CJSON::decode($this->makeRequest($options));
    }

    public function put($url, $json) {
        $options = array(
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_URL => $url,
            CURLOPT_CUSTOMREQUEST => 'PUT',
            CURLOPT_HTTPHEADER => $this->getHeader(),
            CURLOPT_POSTFIELDS => $json
        );

	return CJSON::decode($this->makeRequest($options));
    }

    /**
     * Requests access for docusign if cookie not already present
     */
    public function requestAccess(array $documents, array $recipients, $emailSubject, $contactId, $emailSubLine = NULL, $Asso_Listing = NULL) {
        $header = $this->getHeader();

        $signerList = array();
        $signerCounter = 1;
        $type = 'Contacts';
        foreach ($recipients as $recipient) {
            if ($signerCounter === 1) {
                $type = isset($recipient->firstName) && isset($recipient->lastName) ? $type : 'Sellers2';
            }
            $signer = array(
                'roleName' => 'Signer',
                'name' => isset($recipient->firstName) && isset($recipient->lastName) ? $recipient->firstName . ' ' . $recipient->lastName : $recipient->name,
                'email' => isset($recipient->email) ? $recipient->email : $recipient->c_email,
                'recipientId' => (string) $recipient->id,
                'routingOrder' => (string) $signerCounter,
                'type' => get_class($recipient),
            );
            
            if (isset($recipient->company) && $recipient->company !== '') {
                $signer['company'] = $recipient->company;
            }
            if (isset($recipient->title) && $recipient->title !== '') {
                $signer['title'] = $recipient->title;
            }
            
            $signerList[] = $signer;
            $signerCounter++;
        }

        $documentList = array();
        foreach ($documents as $document) {
            $nameParts = explode('.', $document->fileName);

            if (count($nameParts) < 2) {
                continue;
            }

            $documentType = $nameParts[count($nameParts) - 1];

            $user = User::getMe();

            $result = $documentType === 'docx' ?
                           $this->replaceShortcodes($document, $contactId, $type) :
                           base64_encode(file_get_contents($document->getPath()));

            $encodedText = is_array($result) ? $result['encodedText'] : $result;
            $editedId = is_array($result) ? $result['editedId'] : $document->id;

            $documentList[] = array(
                'documentId' => $editedId,
                'name' => $document->fileName,
                'fileExtension' => $documentType,
                'documentBase64' => $encodedText,
                'originalId' => $document->id,
            );
        }

        $logininfo = $this->getLoginInfo($header);

        if (empty($logininfo)) {
            return 'Login failed, check credentials';
        }

        $baseUrl = $logininfo['baseUrl'];

        // Check if list of documents in table
        $checkDocuments = array();
        foreach ($documentList as $document) {
            $checkDocuments[] = $document['documentId'];
        }
        $documentJson = CJSON::encode($checkDocuments);

	// Make envelope request
        $envelopeJson = $this->createEnvelopeJson(X2Model::model($type)->findByPk($contactId), $type, $emailSubject, $signerList, $documentList, $signerCounter, $emailSubLine);
	$envelopeResponse = $this->post($baseUrl . '/envelopes', $envelopeJson);

        if (!isset($envelopeResponse['uri'])) {
            return json_encode($envelopeResponse);
        }

	foreach ($recipients as $recipient) {
	    foreach ($documentList as $document) {
		$envelope = new Docusign_status;
                $envelope->name = $document['name'];
		$envelope->c_status = 'Started';
		$envelope->c_recordId = $recipient->id;
		$envelope->c_recordType = get_class($recipient);
                $envelope->c_recordEmail = $recipient->email;
		$envelope->c_documentId = $document['documentId'];
		$envelope->c_envelopeId = $envelopeResponse['envelopeId'];
		$envelope->c_owner = User::getMe()->username;
		$envelope->c_listing = $Asso_Listing;
		
		$envelope->save();
	    }
	}
    }

    private function getLoginInfo($header) {
        $demoUrl = 'https://demo.docusign.net/restapi/v2/login_information';
        $productionUrl = 'https://www.docusign.net/restapi/v2/login_information';

        // Extract base url from login info
        $demoDecoded = $this->get($demoUrl);

        if (isset($demoDecoded['loginAccounts']) && isset($demoDecoded['loginAccounts'][0])) {
            $login = $demoDecoded['loginAccounts'][0];
            return $login;
        }

        // Extract base url from login info
        $productionDecoded = $this->get($productionUrl);

        if (isset($productionDecoded['loginAccounts']) && isset($productionDecoded['loginAccounts'][0])) {
            $login = $productionDecoded['loginAccounts'][0];
            return $login;
        }

        return array();
    }

    private function createEnvelopeJson($model, $type, $emailSubject, array $signerList = array(), array $documentList = array(), $senderOrder, $emailSubLine = null) {
        // Json data container
        $data = array();

        // Email data
        $currentDate = date('F j, Y');
        $data['emailSubject'] = isset($emailSubLine) && !empty($emailSubLine) ? $emailSubLine  : "Docusign Document - $currentDate";
        $data['emailBlurb'] = isset($emailSubject) && !empty($emailSubject) ? $emailSubject : "Please sign the Docusign Document,\n\nThank you";

        // Document container
        $data['documents'] = array();
        $documents = &$data['documents'];

        // Set documents based on list
        foreach ($documentList as $document) {
            $toAdd = array();

            $toAdd['documentId'] = $document['documentId'];
            $toAdd['name'] = $document['name'];
            $toAdd['fileExtension'] = $document['fileExtension'];
            $toAdd['documentBase64'] = $document['documentBase64'];

            $documents[] = $toAdd;
        }

        $data['envelopeTemplateDefinition'] = array(
            'name' => 'Test',
            'shared' => 'true',
            'description' => '',
            'pageCount' => count($documentList),
        );

        // Recipient container
        $data['recipients'] = array();
        $recipients = &$data['recipients'];

        // Signer container
        $recipients['signers'] = array();
        $signers = &$recipients['signers'];

        $tabTypes = array(
            'textTabs' => array('Text', 'X2 Field'),
            'signHereTabs' => array('Sign'),
            'initialHereTabs' => array('Initial'),
            'dateSignedTabs' => array('Today\'s Date'),
            'dateTabs' => array('Date'),
        );

        $labelTypes = array(
            'Text', 'Sign', 'Initial', 'Today\'s Date', 'Date'
        );

        // Request status
        $data['status'] = 'sent';

        $templates = array();

        // Set signers based on list
        foreach ($signerList as $signer) {
            foreach ($documentList as $document) {
                $documentId = $document['originalId'];
                $fields = array();

                $media = Media::model()->findByPk($documentId);
                $template = Docusign_templates::model()->findByAttributes(array('nameId' => $media->template));

                if (isset($template) && !empty($template)) {
                    $templates[] = $template;

                    $tabFields = Docusign_fields::model()->findAllByAttributes(array('c_template' => $template->nameId, 'c_isSenderField' => 0));

                    foreach ($tabTypes as $tabType => $fieldTypes) {
                        $fields[$tabType] = array();
                        $tabs = &$fields[$tabType];

                        foreach ($tabFields as $tabField) {
                            if (!isset($tabField->c_anchor_text) || empty($tabField->c_anchor_text)) continue;
                            foreach ($fieldTypes as $fieldType) {
                                if ($fieldType !== $tabField->c_type) {
                                    continue;
                                }

                                $tab = array();

                                $tab['anchorString'] = $tabField->c_anchor_text;
                                $tab['anchorXOffset'] = (string) $tabField->c_offset_right;
                                $tab['anchorYOffset'] = (string) ($tabField->c_offset_top * -1);
                                $tab['anchorIgnoreIfNotPresent'] = 'true';
                                $tab['anchorUnits'] = 'mms';

                                $check = true;
                                switch ($fieldType) {
                                    case 'Text':
                                        $tab['tabLabel'] = $tabField->name;
                                        $tab['value'] = '';
                                        $tab['locked'] = false;
                                        $tab['required'] = boolval($tabField->c_mandatory);
                                        break;
                                    case 'Sign':
                                        $tab['optional'] = !boolval($tabField->c_mandatory);
                                        break;
                                    case 'Initial':
                                        $tab['optional'] = !boolval($tabField->c_mandatory);
                                        break;
                                    case 'X2 Field':
                                        if (!isset($tabField->c_fieldName) || empty($tabField->c_fieldName)) {
                                            $check = false;
                                            break;
                                        }

                                        $recordField = $tabField->c_fieldName;
                                        $record = X2Model::model($signer['type'])->findByPk((int) $signer['recipientId']);

                                        if (!isset($record) || empty($record)) {
                                            $check = false;
                                            break;
                                        }

                                        $recordFieldValue = $this->replaceDocusignCode($signer['type'], $recordField, $record->id);

                                        $checkJson = json_decode($recordFieldValue);
                                        if (strlen($recordFieldValue) > 1 && substr($recordFieldValue, 0, 1) === "[" && isset($checkJson)) {
                                            $tokens = explode(",", $recordFieldValue);
                                            $sum = "";
                                            $first = true;
                                            foreach ($tokens as $oldtoken) {
                                                $token = str_replace('"', '', $oldtoken);
                                                $token = str_replace(' ', '', $token);
                                                $token = str_replace('[', '', $token);
                                                $token = str_replace(']', '', $token);
                                                if ($first === false) {
                                                    $sum = $sum . ", ";
                                                }
                                                $sum = $sum . $token;
                                                $first = false;
                                            }
                                            $recordFieldValue = $sum;
                                        }

                                        $tab['tabLabel'] = $tabField->c_fieldName;
                                        $tab['value'] = $recordFieldValue;
                                        $tab['locked'] = !boolval($tabField->c_isEditable);
                                        $tab['required'] = boolval($tabField->c_mandatory);
                                        break;
                                    case 'Date': case 'Today\'s Date': default:
                                        break;
                                }

                                if (!$check) {
                                    continue;
                                }

                                $tabs[] = $tab;
                            }
                        }
                    }
                }

                $signers[] = array(
                    'roleName' => $signer['roleName'],
                    'name' => $signer['name'],
                    'email' => $signer['email'],
                    'recipientId' => $signer['recipientId'],
                    'routingOrder' => $signer['routingOrder'],
                    'tabs' => !empty($fields) ? $fields : array('textTabs' => array()),
                );
            }
        }

        $me = User::getMe();
        $email = $me->emailAddress;

        $senderFields = array();

        if (isset($template)) {
            foreach ($templates as $template) {
                $templateFields = Docusign_fields::model()->findAllByAttributes(array('c_template' => $template->nameId, 'c_isSenderField' => 1));
                $senderFields = array_merge($senderFields, $templateFields);
            }
        }

        $fields = array();

        foreach ($tabTypes as $tabType => $fieldTypes) {
            $fields[$tabType] = array();
            $tabs = &$fields[$tabType];

            foreach ($senderFields as $tabField) {
                foreach ($fieldTypes as $fieldType) {
                    if ($fieldType !== $tabField->c_type) {
                        continue;
                    }

                    $tab = array();

                    $tab['anchorString'] = $tabField->c_anchor_text;
                    $tab['anchorXOffset'] = (string) $tabField->c_offset_right;
                    $tab['anchorYOffset'] = (string) ($tabField->c_offset_top * -1);
                    $tab['anchorIgnoreIfNotPresent'] = 'true';
                    $tab['anchorUnits'] = 'mms';

                    $check = true;
                    switch ($fieldType) {
                        case 'Text':
                            $tab['tabLabel'] = $tabField->name;
                            $tab['value'] = '';
                            $tab['locked'] = false;
                            $tab['required'] = boolval($tabField->c_mandatory);
                            break;
                        case 'Sign':
                            $tab['optional'] = !boolval($tabField->c_mandatory);
                            break;
                        case 'Initial':
                            $tab['optional'] = !boolval($tabField->c_mandatory);
                            break;
                        case 'X2 Field':
                            if (!isset($tabField->c_fieldName) || empty($tabField->c_fieldName)) {
                                $check = false;
                                break;
                            }

                            $recordField = $tabField->c_fieldName;
                            $record = X2Model::model($signer['type'])->findByPk((int) $signer['recipientId']);

                            if (!isset($record) || empty($record)) {
                                $check = false;
                                break;
                            }

                            $recordFieldValue = isset($record->$recordField) ? $record->$recordField : '';

                            $tab['tabLabel'] = $tabField->c_fieldName;
                            $tab['value'] = $recordFieldValue;
                            $tab['locked'] = false;
                            $tab['required'] = boolval($tabField->c_mandatory);
                            break;
                        case 'Date': case 'Today\'s Date': default:
                            break;
                    }

                    if (!$check) {
                        continue;
                    }

                    $tabs[] = $tab;
                }
            }
        }

        $signers[] = array(
            'roleName' => 'Signer',
            'name' => $me->firstName . ' ' . $me->lastName,
            'email' => $me->emailAddress,
            'recipientId' => $me->id,
            'routingOrder' => $senderOrder,
            'tabs' => !empty($fields) ? $fields : array('textTabs' => array()),
        );

        return json_encode($data, JSON_UNESCAPED_SLASHES);
    }

    private function makeRequest(array $options) {
        $curl = curl_init();

        curl_setopt_array($curl, $options);

        $resp = curl_exec($curl);

        curl_close($curl);

        return $resp;
    }

    private function replaceDocusignCode($type, $field, $contactId) {
        if ($type === 'Contacts') {
                $contact = Contacts::model()->findByPk((int) $contactId);
                foreach (Contacts::model()->attributeLabels() as $fieldName => $label) {
                    if (isset($contact) && $field === 'b_' . $fieldName)
                        return $contact->$fieldName;
                }

                $me = User::getMe();
                $listing = Listings2::model()->findByAttributes(array('nameId' => $contact->c_listinglookup__c));
                $employee = Employees::model()->findByAttributes(array('c_user__c' => $me->username));
                $franchisee = null;
                if (isset($employee)) {
                    $franchisee = Franchisees::model()->findByAttributes(array('nameId' => $employee->c_franchisee__c));
                }

                foreach(Listings2::model()->attributeLabels() as $fieldName => $label) {
                    $check = str_replace('l_' . $fieldName, $fieldName, $field);
                    if (isset($listing) && $check === $fieldName)
                        return $listing->$fieldName;
                }

                if (isset($listing)) {
                    $owner = User::model()->findByAttributes(array('username' => $listing->c_ownerid));

                    if (isset($owner) && $field === 'w_firstName')
                        return $owner->firstName;
                    if (isset($owner) && $field === 'w_lastName')
                        return $owner->lastName;
                }

                if (isset($franchisee)) {
                    $state = States::model()->findByAttributes(array('name' => $franchisee->c_state__c));
                    $county = Counties::model()->findByAttributes(array('name' => $franchisee->c_county__c));

                    if (isset($state) && $field === 'f_c_state__c')
                        return $state->name;
                    if (isset($county) && $field === 'f_c_county__c')
                        return $county->name;

                    $owner = User::model()->findByAttributes(array('username' => $franchisee->c_franchisee_owner__c));
                    $office = Offices::model()->findByAttributes(array('c_franchisee__c' => $franchisee->nameId));

                    if (isset($owner) && $field === 'u_firstName')
                        return $owner->firstName;
                    if (isset($owner) && $field === 'u_lastName')
                        return $owner->lastName;

                    foreach(Offices::model()->attributeLabels() as $fieldName => $label) {
                        $check = str_replace('o_' . $fieldName, $fieldName, $field);
                        if (isset($office) && $check === $fieldName)
                            return $office->$fieldName;
                    }
                }

                foreach (Franchisees::model()->attributeLabels() as $fieldName => $label) {
                    $check = str_replace('f_' . $fieldName, $fieldName, $field);
                    if (isset($franchisee) && $check === $fieldName)
                        return $franchisee->$fieldName;
                }

            } else if ($type === 'Sellers2') {
                $contact = Sellers2::model()->findByPk((int) $contactId);
            foreach (Sellers2::model()->attributeLabels() as $fieldName => $label) {
                if (isset($contact) && $field === 's_' . $fieldName)
                    return $contact->$fieldName;
            }

            $me = User::getMe();
            $listing = Listings2::model()->findByAttributes(array('c_Seller' => $contact->nameId));
            $employee = Employees::model()->findByAttributes(array('c_user__c' => $me->username));
            $franchisee = null;
            if (isset($employee)) {
                $franchisee = Franchisees::model()->findByAttributes(array('nameId' => $employee->c_franchisee__c));
            }

            foreach(Listings2::model()->attributeLabels() as $fieldName => $label) {
                $check = str_replace('l_' . $fieldName, $fieldName, $field);
                if (isset($listing) && $check === $fieldName)
                    return $listing->$fieldName;
            }

            if (isset($listing)) {
                $owner = User::model()->findByAttributes(array('username' => $listing->c_ownerid));

                if (isset($owner) && $field === 'w_firstName')
                    return $owner->firstName;
                if (isset($owner) && $field === 'w_lastName')
                    return $owner->lastName;
            }

            if (isset($franchisee)) {
                $state = States::model()->findByAttributes(array('name' => $franchisee->c_state__c));
                $county = Counties::model()->findByAttributes(array('name' => $franchisee->c_county__c));

                if (isset($state) && $field === 'f_c_state__c')
                    return $state->name;
                if (isset($county) && $field === 'f_c_county__c')
                    return $county->name;

                $owner = User::model()->findByAttributes(array('username' => $franchisee->c_franchisee_owner__c));
                $office = Offices::model()->findByAttributes(array('c_franchisee__c' => $franchisee->nameId));

                if (isset($owner) && $field === 'u_firstName')
                    return $owner->firstName;
                if (isset($owner) && $field === 'u_lastName')
                    return $owner->lastName;

                foreach(Offices::model()->attributeLabels() as $fieldName => $label) {
                    $check = str_replace('o_' . $fieldName, $fieldName, $field);
                    if (isset($office) && $check === $fieldName)
                        return $office->$fieldName;
                }
            }

            foreach (Franchisees::model()->attributeLabels() as $fieldName => $label) {
                $check = str_replace('f_' . $fieldName, $fieldName, $field);
                if (isset($franchisee) && $check === $fieldName)
                    return $franchisee->$fieldName;
            }
        }
        return '';
    }

    public function replaceShortcodes($document, $contactId, $type) {

        $oldFileName = $document->fileName;
        $newFileName = 'ReplacedFields_' . (string) time() . '.docx';
        $oldPath = $document->getPath();
        $newPath = str_replace($oldFileName, $newFileName, $oldPath);

        copy($oldPath, $newPath);

        $zip = new ZipArchive();

	// Replace shortcodes
	if ($zip->open($newPath, ZipArchive::CREATE) !== TRUE) {
	    throw new CHttpException(500, "Cannot open $document->fileName");
	}

        $toEdit = array(
            'word/document.xml',
            'word/header1.xml',
            'word/header2.xml',
            'word/header3.xml',
            'word/footer1.xml',
            'word/footer2.xml',
            'word/footer3.xml',
        );

        $tempArray = array();

        foreach($toEdit as $file) {

            $tempArray[$file] = $xml = $zip->getFromName($file);

            if ($type === 'Contacts') {
                $contact = Contacts::model()->findByPk($contactId);
                foreach (Contacts::model()->attributeLabels() as $fieldName => $label) {
                    $xml = str_replace('b_' . $fieldName, $contact->$fieldName, $xml);
                }

                $me = User::getMe();
                $listing = Listings2::model()->findByAttributes(array('nameId' => $contact->c_listinglookup__c));
                $employee = Employees::model()->findByAttributes(array('c_user__c' => $me->username));
                $franchisee = null;
                if (isset($employee)) {
                    $franchisee = Franchisees::model()->findByAttributes(array('nameId' => $employee->c_franchisee__c));
                }

                foreach(Listings2::model()->attributeLabels() as $fieldName => $label) {
                    if (isset($listing)) {
                        $xml = str_replace('l_' . $fieldName, $listing->$fieldName, $xml);
                    } else {
                        $xml = str_replace('l_' . $fieldName, "", $xml);
                    }
                }

                if (isset($listing)) {
                    $owner = User::model()->findByAttributes(array('username' => $listing->c_ownerid));

                    if (isset($owner)) {
                        $xml = str_replace('w_firstName', $owner->firstName, $xml);
                        $xml = str_replace('w_lastName', $owner->lastName, $xml);
                    } else {
                        $xml = str_replace('w_firstName', "", $xml);
                        $xml = str_replace('w_lastName', "", $xml);
                    }
                }

                if (isset($franchisee)) {
                    $state = States::model()->findByAttributes(array('name' => $franchisee->c_state__c));
                    $county = Counties::model()->findByAttributes(array('name' => $franchisee->c_county__c));

                    if (isset($state)) {
                        $xml = str_replace('f_c_state__c', $state->name, $xml);
                    } else {
                        $xml = str_replace('f_c_state__c', "", $xml);
                    }

                    if (isset($county)) {
                        $xml = str_replace('f_c_county__c', $county->name, $xml);
                    } else {
                        $xml = str_replace('f_c_county__c', "", $xml);
                    }

                    $owner = User::model()->findByAttributes(array('username' => $franchisee->c_franchisee_owner__c));
                    $office = Offices::model()->findByAttributes(array('c_franchisee__c' => $franchisee->nameId));
 
                    if (isset($owner)) {
                        $xml = str_replace('u_firstName', $owner->firstName, $xml);
                        $xml = str_replace('u_lastName', $owner->lastName, $xml);
                    } else {
                        $xml = str_replace('u_firstName', "", $xml);
                        $xml = str_replace('u_lastName', "", $xml);
                    }

                    foreach(Offices::model()->attributeLabels() as $fieldName => $label) {
                        if (isset($office)) {
                            $xml = str_replace('o_' . $fieldName, $office->$fieldName, $xml);
                        } else {
                            $xml = str_replace('o_' . $fieldName, "", $xml);
                        }
                    }
                    
                } else {
                    $xml = str_replace('f_c_state__c', "", $xml);
                    $xml = str_replace('f_c_county__c', "", $xml);
                    $xml = str_replace('u_firstName', "", $xml);
                    $xml = str_replace('u_lastName', "", $xml);
                    foreach(Offices::model()->attributeLabels() as $fieldName => $label) {
                        if (!isset($office)) {
                            $xml = str_replace('o_' . $fieldName, "", $xml);
                        }
                    }
                }

                foreach (Franchisees::model()->attributeLabels() as $fieldName => $label) {
                    if (isset($franchisee)) {
                        $xml = str_replace('f_' . $fieldName, $franchisee->$fieldName, $xml);
                    } else {
                        $xml = str_replace('f_' . $fieldName, "", $xml);
                    }
                }

            } else if ($type === 'Sellers2') {
                $contact = Sellers2::model()->findByPk($contactId);
                foreach (Sellers2::model()->attributeLabels() as $fieldName => $label) {
                    $xml = str_replace('s_' . $fieldName, $contact->$fieldName, $xml);
                }

                $me = User::getMe();
                $listing = Listings2::model()->findByAttributes(array('c_Seller' => $contact->nameId));
                $employee = Employees::model()->findByAttributes(array('c_user__c' => $me->username));
                $franchisee = null;
                if (isset($employee)) {
                    $franchisee = Franchisees::model()->findByAttributes(array('nameId' => $employee->c_franchisee__c));
                }

                foreach(Listings2::model()->attributeLabels() as $fieldName => $label) {
                    if (isset($listing)) {
                        $xml = str_replace('l_' . $fieldName, $listing->$fieldName, $xml);
                    } else {
                        $xml = str_replace('l_' . $fieldName, "", $xml);
                    }
                }

                if (isset($listing)) {
                    $owner = User::model()->findByAttributes(array('username' => $listing->c_ownerid));

                    if (isset($owner)) {
                        $xml = str_replace('w_firstName', $owner->firstName, $xml);
                        $xml = str_replace('w_lastName', $owner->lastName, $xml);
                    } else {
                        $xml = str_replace('w_firstName', "", $xml);
                        $xml = str_replace('w_lastName', "", $xml);
                    }
                }

                if (isset($franchisee)) {
                    $state = States::model()->findByAttributes(array('name' => $franchisee->c_state__c));
                    $county = Counties::model()->findByAttributes(array('name' => $franchisee->c_county__c));

                    if (isset($state)) {
                        $xml = str_replace('f_c_state__c', $state->name, $xml);
                    } else {
                        $xml = str_replace('f_c_state__c', "", $xml);
                    }

                    if (isset($county)) {
                        $xml = str_replace('f_c_county__c', $county->name, $xml);
                    } else {
                        $xml = str_replace('f_c_county__c', "", $xml);
                    }

                    $owner = User::model()->findByAttributes(array('username' => $franchisee->c_franchisee_owner__c));
                    $office = Offices::model()->findByAttributes(array('c_franchisee__c' => $franchisee->nameId));

                    if (isset($owner)) {
                        $xml = str_replace('u_firstName', $owner->firstName, $xml);
                        $xml = str_replace('u_lastName', $owner->lastName, $xml);
                    } else {
                        $xml = str_replace('u_firstName', "", $xml);
                        $xml = str_replace('u_lastName', "", $xml);
                    }

                    foreach(Offices::model()->attributeLabels() as $fieldName => $label) {
                        if (isset($office)) {
                            $xml = str_replace('o_' . $fieldName, $office->$fieldName, $xml);
                        } else {
                            $xml = str_replace('o_' . $fieldName, "", $xml);
                        }
                    }

                } else {
                    $xml = str_replace('f_c_state__c', "", $xml);
                    $xml = str_replace('f_c_county__c', "", $xml);
                    $xml = str_replace('u_firstName', "", $xml);
                    $xml = str_replace('u_lastName', "", $xml);
                    foreach(Offices::model()->attributeLabels() as $fieldName => $label) {
                        if (!isset($office)) {
                            $xml = str_replace('o_' . $fieldName, "", $xml);
                        }
                    }
                }

                foreach (Franchisees::model()->attributeLabels() as $fieldName => $label) {
                    if (isset($franchisee)) {
                        $xml = str_replace('f_' . $fieldName, $franchisee->$fieldName, $xml);
                    } else {
                        $xml = str_replace('f_' . $fieldName, "", $xml);
                    }
                }

            }

	    if (!$zip->addFromString($file, $xml)) {
	        throw new CHttpException(500, "File not written");
	    }

        }

	$zip->close();

	// Encode the new changes for request
	$encodedText = base64_encode(file_get_contents($newPath));

        $model = new Media;
        $model->fileName = $newFileName;
        $model->createDate = time();
        $model->lastUpdated = time();
        $model->uploadedBy = Yii::app()->user->name;
        $model->associationType = 'none';
        $model->save();

        return array(
            'encodedText' => $encodedText,
            'editedId' => $model->id,
        );
    }

}
